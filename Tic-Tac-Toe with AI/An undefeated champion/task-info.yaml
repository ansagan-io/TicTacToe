type: edu
custom_name: stage5
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import tictactoe.Main;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;

    enum FieldState {
        X, O, FREE;

        static FieldState get(char symbol) {
            switch (symbol) {
                case 'X': return X;
                case 'O': return O;
                case ' ':
                case '_':
                    return FREE;
                default: return null;
            }
        }
    }

    class TicTacToeField {

        final FieldState[][] field;

        TicTacToeField(FieldState[][] field) {
            this.field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    this.field[row][col] = field[row][col];
                }
            }
        }

        TicTacToeField(String str) {
            field = new FieldState[3][3];

            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    field[row][col] =
                        FieldState.get(str.charAt(((2 - row) * 3 + col)));
                }
            }
        }

        boolean equalTo(TicTacToeField other) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean hasNextAs(TicTacToeField other) {
            boolean improved = false;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        if (field[i][j] == FieldState.FREE && !improved) {
                            improved = true;
                        }
                        else {
                            return false;
                        }
                    }
                }
            }
            return improved;
        }

        boolean isCloseTo(TicTacToeField other) {
            return equalTo(other)
                || hasNextAs(other)
                || other.hasNextAs(this);
        }

        static TicTacToeField parse(String fieldStr) {

            try {
                List<String> lines = fieldStr
                    .lines()
                    .map(String::strip)
                    .filter(e ->
                        e.startsWith("|")
                            && e.endsWith("|"))
                    .collect(Collectors.toList());

                for (String line : lines) {
                    if (line.length() != 9) {
                        throw new WrongAnswer("Line of Tic-Tac-Toe " +
                            "field should be 9 characters long\n" +
                            "found " + line.length() + " characters in \"" + line + "\"");
                    }
                    for (char c : line.toCharArray()) {
                        if (c != 'X'
                            && c != 'O'
                            && c != '|'
                            && c != ' '
                            && c != '_') {
                            return null;
                        }
                    }
                }

                FieldState[][] field = new FieldState[3][3];

                int y = 2;
                for (String line : lines) {
                    char[] cols = new char[] {
                        line.charAt(2),
                        line.charAt(4),
                        line.charAt(6)
                    };

                    int x = 0;
                    for (char c : cols) {
                        FieldState state = FieldState.get(c);
                        if (state == null) {
                            return null;
                        }
                        field[y][x] = state;
                        x++;
                    }
                    y--;
                }

                return new TicTacToeField(field);
            } catch (Exception ex) {
                return null;
            }
        }

        static List<TicTacToeField> parseAll(String output) {
            List<TicTacToeField> fields = new ArrayList<>();

            List<String> lines = output
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String candidateField = "";
            boolean insideField = false;
            for (String line : lines) {
                if (line.contains("----") && !insideField) {
                    insideField = true;
                    candidateField = "";
                } else if (line.contains("----") && insideField) {
                    TicTacToeField field = TicTacToeField.parse(candidateField);
                    if (field != null) {
                        fields.add(field);
                    }
                    insideField = false;
                }

                if (insideField && line.startsWith("|")) {
                    candidateField += line + "\n";
                }
            }

            return fields;
        }

    }


    class Clue {
        int x, y;
        Clue(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    public class TicTacToeTest extends StageTest<Clue> {
        public TicTacToeTest() throws Exception {
            super(Main.class);
        }

        static String[] inputs = new String[] {
            "1 1", "1 2", "1 3",
            "2 1", "2 2", "2 3",
            "3 1", "3 2", "3 3"
        };

        String iterateCells(String initial) {
            int index = -1;
            for (int i = 0; i < inputs.length; i++) {
                if (initial.equals(inputs[i])) {
                    index = i;
                    break;
                }
            }
            if (index == -1) {
                return "";
            }
            String fullInput = "";
            for (int i = index; i < index + 9; i++) {
                fullInput += inputs[i % inputs.length] + "\n";
            }
            return fullInput;
        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            int i = 0;
            for (String input : inputs) {
                String fullMoveInput = iterateCells(input);

                String[] strNums = input.split(" ");
                int x = Integer.parseInt(strNums[0]);
                int y = Integer.parseInt(strNums[1]);

                if (i % 2 == 1) {
                    // mix with incorrect data
                    fullMoveInput = "4 " + i + "\n" + fullMoveInput;
                }

                String fullGameInput = "";
                for (int j = 0; j < 9; j++) {
                    fullGameInput += fullMoveInput;
                }

                String initial;

                switch (i % 6) {
                    case 0: initial = "start user easy\n"; break;
                    case 1: initial = "start easy user\n"; break;
                    case 2: initial = "start user medium\n"; break;
                    case 3: initial = "start medium user\n"; break;
                    case 4: initial = "start user hard\n"; break;
                    case 5: initial = "start hard user\n"; break;
                    default: continue;
                }

                fullGameInput = initial + fullGameInput + "exit";

                tests.add(new TestCase<Clue>()
                    .setInput(fullGameInput));

                i++;
            }

            tests.add(new TestCase<Clue>()
                .setInput("start easy easy\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start medium medium\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start hard hard\nexit"));


            tests.add(new TestCase<Clue>()
                .setInput("start medium easy\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start easy medium\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start medium hard\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start hard medium\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start easy hard\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start hard easy\nexit"));


            tests.add(new TestCase<Clue>()
                .setInput("start user user\n" +
                    "1 1\n" +
                    "2 2\n" +
                    "1 2\n" +
                    "2 1\n" +
                    "1 3\n" +
                    "exit"));

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<TicTacToeField> fields = TicTacToeField.parseAll(reply);

            if (fields.size() == 0) {
                return new CheckResult(false, "No fields found");
            }

            for (int i = 1; i < fields.size(); i++) {
                TicTacToeField curr = fields.get(i - 1);
                TicTacToeField next = fields.get(i);

                if (!(curr.equalTo(next) || curr.hasNextAs(next))) {
                    return new CheckResult(false,
                        "For two fields following each " +
                            "other one is not a continuation " +
                            "of the other (they differ more than in two places).");
                }
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/Player.java
  visible: true
  text: |
    package tictactoe;

    public class Player {
        private char sign;

        public Player(char sign) {
            this.sign = sign;
        }

        public int[] getXY() {
            return new int[3];
        }

        public void setSign(char sign) {
            this.sign = sign;
        }

        public char getSign() {
            return sign;
        }
    }
  learner_created: true
- name: src/tictactoe/TicTacToe.java
  visible: true
  text: |
    package tictactoe;

    import java.util.HashMap;
    import java.util.Map;
    import java.util.Scanner;

    public class TicTacToe {
        private static final Scanner scanner = new Scanner(System.in);
        private static boolean turn = true;
        private static final char[][] layoutMatrix = new char[3][3];

        private static Player player1;
        private static Player player2;

        static Map<Integer, int[][]> coordinates = new HashMap<>();

        public static void startApp(){
            coordinates = createCoordinates();
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    layoutMatrix[i][j] = ' ';
                }
            }

            while (true) {
                System.out.print("Input command: ");
                String command = scanner.nextLine();
                String[] commands = command.split(" ");
                if (commands[0].equals("exit")) {
                    System.exit(0);
                }
                if (commands.length != 3 || !commands[0].equals("start")){
                    System.out.println("Bad parameters!");
                    continue;
                }
                startGame(commands[1], commands[2]);
            }
        }



        private static void startGame(String firstPlayer, String secondPlayer) {
            player1 = createPlayer(firstPlayer, 'X');
            player2 = createPlayer(secondPlayer, 'O');
            printLayout();
            enterCoordinate();
        }

        private static Player createPlayer(String player, char sign) {
            Player player3 = null;
            switch (player) {
                case "user": player3 = new User(sign);
                    break;
                case "easy": player3 = new EasyLevel(sign);
                    break;
                case "medium": player3 = new MediumLevel(sign);
                    break;
                default: System.exit(0);
            }
            return player3;
        }

        private static void enterCoordinate() {
            int[] coors;
            if (turn) {
                coors = player1.getXY();
                turn = false;
                acceptCoordinates(coors[0], coors[1], player1.getSign());

            } else {
                coors = player2.getXY();
                turn = true;
                acceptCoordinates(coors[0], coors[1], player2.getSign());

            }
            printLayout();
            checkWhoWin();
        }

        public static boolean isOutOfOneAndThree(int x, int y) {
            return x < 0 || x > 2 || y < 0 || y > 2;
        }

        public static boolean isOccupied(int x, int y) {
            return layoutMatrix[x][y] != ' ';
        }


        private static void acceptCoordinates(int x, int y, char sign) {
            layoutMatrix[x][y] = sign;
        }

        private static void checkWhoWin() {
            int[] eightLineScoresOfX = countScores('X');
            int[] eightLineScoresOfO = countScores('O');
            int sum = 0;
            for (int i = 0; i < 8; i++) {
                sum += eightLineScoresOfX[i] + eightLineScoresOfO[i];
                if(eightLineScoresOfX[i] == 3 && eightLineScoresOfO[i] == 0) {
                    System.out.println("X wins");
                    System.exit(0);
                } else if (eightLineScoresOfX[i] == 0 && eightLineScoresOfO[i] == 3) {
                    System.out.println("O wins");
                    System.exit(0);
                }
            }
            if (sum == 24) {
                System.out.println("Draw");
                System.exit(0);
            } else {
                enterCoordinate();
            }
        }

        public static void printLayout(){
            System.out.println("---------");
            for (char[] first:layoutMatrix) {
                System.out.print("| ");
                for (char chere:first) {
                    System.out.print(chere + " ");
                }
                System.out.println("|");
            }
            System.out.println("---------");
        }

        static int[] countScores(char x) {
            int[] countedLine = new int[8];
            int length = 0;
            int count = 0;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (layoutMatrix[i][j] == x) {
                        count++;
                    }
                }
                countedLine[length] = count;
                count = 0;
                length++;
            }

            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (layoutMatrix[j][i] == x) {
                        count++;
                    }
                }
                countedLine[length] = count;
                count = 0;
                length++;
            }

            for (int i = 0; i < 3; i++) {
                if (layoutMatrix[i][i] == x) {
                    count++;
                }
            }
            countedLine[length] = count;
            length++;
            count = 0;
            for (int i = 0; i < 3; i++) {
                if (layoutMatrix[i][2-i] == x) {
                    count++;
                }
            }
            countedLine[length] = count;

            return countedLine;
        }

        private static Map<Integer,int[][]> createCoordinates() {
            Map<Integer,int[][]> map = new HashMap<>();
            int[][] zero = {{0, 0},{0, 1},{0, 2}};
            map.put(0, zero);
            int[][] first = {{1, 0},{1, 1},{1, 2}};
            map.put(1, first);
            int[][] second = {{2, 0},{2, 1},{2, 2}};
            map.put(2, second);
            int[][] third = {{0, 0},{1, 0},{2, 0}};
            map.put(3, third);
            int[][] forth = {{0, 1},{1, 1},{2, 1}};
            map.put(4, forth);
            int[][] fifth = {{0, 2},{1, 2},{2, 2}};
            map.put(5, fifth);
            int[][] sixth = {{0, 0},{1, 1},{2, 2}};
            map.put(6, sixth);
            int[][] seventh = {{0, 2},{1, 1},{2, 0}};
            map.put(7, seventh);
            return map;
        }
    }
  learner_created: true
- name: src/tictactoe/EasyLevel.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Random;

    public class EasyLevel extends Player{
        private final Random random = new Random();
        public EasyLevel(char sign) {
            super(sign);
        }

        @Override
        public int[] getXY() {
            int x = random.nextInt(3);
            int y = random.nextInt(3);
            while (TicTacToe.isOccupied(x, y)){
                x = random.nextInt(3);
                y = random.nextInt(3);
            }
            System.out.println("Making move level \"easy\"");
            return new int[]{x, y};
        }
    }
  learner_created: true
- name: src/tictactoe/User.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Scanner;

    public class User extends Player{
        private final Scanner scanner= new Scanner(System.in);

        public User(char sign) {
            super(sign);
        }

        @Override
        public int[] getXY() {
            while (true) {
                int[] xy = new int[2];
                while (true) {
                    try {
                        System.out.print("Enter the coordinates: ");
                        String[] inputSplit = scanner.nextLine().split(" ", 2);
                        if (inputSplit.length != 2) {
                            System.out.println("Coordinate should be at least two value");
                            continue;
                        }
                        for (int i = 0; i < 2; i++) {
                            xy[i] = Integer.parseInt(inputSplit[i]);
                        }
                        break;
                    } catch (NumberFormatException e) {
                        System.out.println("You should enter numbers!");
                    }
                }
                int x = 3 - xy[1];
                int y= xy[0] - 1;
                if (TicTacToe.isOutOfOneAndThree(x, y)) {
                    System.out.println("Coordinates should be from 1 to 3!");
                    continue;
                } else if(TicTacToe.isOccupied(x, y)){
                    System.out.println("This cell is occupied! Choose another one!");
                    continue;
                }
                return new int[]{x, y};
            }
        }
    }
  learner_created: true
- name: src/tictactoe/MediumLevel.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Random;

    public class MediumLevel extends Player{
        private final Random random = new Random();

        public MediumLevel(char sign) {
            super(sign);
        }

        @Override
        public int[] getXY() {
            char enemySign;
            if(this.getSign() == 'X') {
                enemySign = 'O';
            }else {
                enemySign = 'X';
            }
            int[] scoresOfMe = TicTacToe.countScores(this.getSign());
            int[] scoresOfEnemy = TicTacToe.countScores(enemySign);
            for (int i = 0; i < 8; i++) {
                if (scoresOfMe[i] == 2){
                    for (int[] coors : TicTacToe.coordinates.get(i)) {
                        if(!TicTacToe.isOccupied(coors[0], coors[1])){
                            System.out.println("Making move level \"medium\"");
                            return coors;
                        }
                    }
                } else if(scoresOfEnemy[i] == 2){
                    for (int[] coors : TicTacToe.coordinates.get(i)) {
                        if(!TicTacToe.isOccupied(coors[0], coors[1])){
                            System.out.println("Making move level \"medium\"");
                            return coors;
                        }
                    }
                }
            }
            int x = random.nextInt(3);
            int y = random.nextInt(3);
            while (TicTacToe.isOccupied(x, y)) {
                x = random.nextInt(3);
                y = random.nextInt(3);
            }
            System.out.println("Making move level \"medium\"");
            return new int[]{x, y};
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/81/stages/451/implement
status: Unchecked
record: -1
